"use strict";

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _defineProperty = require("@babel/runtime/helpers/defineProperty");

require("@babel/runtime/helpers/objectWithoutProperties"), require("@babel/runtime/helpers/classCallCheck"), 
require("lodash.isequal");

var Controller_dist_fields = require("../../../../../Controller/dist/fields.cjs.prod.js");

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}

var _defineProperty__default = _interopDefault(_defineProperty);

class PasswordController extends Controller_dist_fields.default {
  constructor(...args) {
    super(...args), _defineProperty__default.default(this, "getFilterGraphQL", ({type: type, value: value}) => ({
      [`${this.path}_${type}`]: value
    })), _defineProperty__default.default(this, "getFilterLabel", () => "" + this.label), 
    _defineProperty__default.default(this, "formatFilter", ({value: value}) => `${this.label} ${value ? "is set" : "is not set"}`), 
    _defineProperty__default.default(this, "getQueryFragment", () => this.path + "_is_set"), 
    _defineProperty__default.default(this, "getFilterTypes", () => [ {
      type: "is_set",
      label: "Is Set",
      getInitialValue: () => !0
    } ]), _defineProperty__default.default(this, "serialize", data => data[this.path] ? data[this.path].inputPassword : void 0), 
    _defineProperty__default.default(this, "validateInput", ({originalInput: originalInput, addFieldValidationError: addFieldValidationError}) => {
      const {minLength: minLength} = this.config;
      if (this.isRequired) {
        if (!originalInput[this.path] || !originalInput[this.path].inputPassword) return addFieldValidationError("Password is required");
      } else if (!originalInput[this.path] || !originalInput[this.path].inputPassword) return;
      return originalInput[this.path].inputPassword.length < minLength ? addFieldValidationError(`Password must be at least ${minLength} characters`) : originalInput[this.path].inputPassword !== originalInput[this.path].inputConfirm ? addFieldValidationError("Passwords do not match") : void 0;
    });
  }
}

exports.default = PasswordController;
