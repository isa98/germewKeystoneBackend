'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/classCallCheck');
require('lodash.isequal');
var Controller_dist_fields = require('../../../../../Controller/dist/fields.cjs.dev.js');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefault(_defineProperty);
var _objectWithoutProperties__default = /*#__PURE__*/_interopDefault(_objectWithoutProperties);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
class CheckboxController extends Controller_dist_fields['default'] {
  constructor(_ref, ...args) {
    let {
      defaultValue = false
    } = _ref,
        config = _objectWithoutProperties__default['default'](_ref, ["defaultValue"]);

    super(_objectSpread(_objectSpread({}, config), {}, {
      defaultValue
    }), ...args);

    _defineProperty__default['default'](this, "serialize", data => data[this.path]);

    _defineProperty__default['default'](this, "deserialize", data => data[this.path]);

    _defineProperty__default['default'](this, "getFilterGraphQL", ({
      type,
      value
    }) => {
      const key = type === 'is' ? `${this.path}` : `${this.path}_${type}`;
      return {
        [key]: value
      };
    });

    _defineProperty__default['default'](this, "getFilterLabel", ({
      label
    }) => {
      return `${this.label} ${label.toLowerCase()}`;
    });

    _defineProperty__default['default'](this, "formatFilter", ({
      label,
      value
    }) => {
      return `${this.getFilterLabel({
        label
      })}: ${value}`;
    });

    _defineProperty__default['default'](this, "getFilterTypes", () => [{
      type: 'is',
      label: 'Is',
      getInitialValue: () => true
    }, {
      type: 'not',
      label: 'Is not',
      getInitialValue: () => true
    }]);
  }

}

exports.default = CheckboxController;
