"use strict";

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _defineProperty = require("@babel/runtime/helpers/defineProperty");

require("@babel/runtime/helpers/objectWithoutProperties"), require("@babel/runtime/helpers/classCallCheck"), 
require("lodash.isequal");

var Controller_dist_fields = require("../../../../../Controller/dist/fields.cjs.prod.js");

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}

var _defineProperty__default = _interopDefault(_defineProperty);

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter((function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    }))), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {
      _defineProperty__default.default(target, key, source[key]);
    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    }));
  }
  return target;
}

class RelationshipController extends Controller_dist_fields.default {
  constructor(config, ...args) {
    const {defaultValue: defaultValue = (config.many ? [] : null)} = config;
    super(_objectSpread(_objectSpread({}, config), {}, {
      defaultValue: defaultValue
    }), ...args), _defineProperty__default.default(this, "getQueryFragment", (path = this.path) => `\n      ${path} {\n        id\n        _label_\n      }\n    `), 
    _defineProperty__default.default(this, "getFilterGraphQL", ({type: type, value: value}) => "contains" === type ? {
      [this.path + "_some"]: {
        id: value
      }
    } : "is" === type ? {
      ["" + this.path]: {
        id: value
      }
    } : void 0), _defineProperty__default.default(this, "getFilterLabel", ({label: label}) => `${this.label} ${label.toLowerCase()}`), 
    _defineProperty__default.default(this, "formatFilter", ({label: label, value: value}) => `${this.getFilterLabel({
      label: label
    })}: "${value}"`), _defineProperty__default.default(this, "serialize", data => {
      const {path: path} = this, {many: many} = this.config;
      let value = data[path];
      if (many) {
        let ids = [];
        return Array.isArray(value) && (ids = value.map(x => x.id)), {
          disconnectAll: !0,
          connect: ids.map(id => ({
            id: id
          }))
        };
      }
      return value ? {
        connect: {
          id: value.id
        }
      } : {
        disconnectAll: !0
      };
    }), _defineProperty__default.default(this, "getFilterTypes", () => {
      const {many: many} = this.config;
      return many ? [ {
        type: "contains",
        label: "Contains",
        getInitialValue: () => null
      } ] : [ {
        type: "is",
        label: "Is",
        getInitialValue: () => null
      } ];
    });
  }
  getRefList() {
    return this.getListByKey(this.config.ref);
  }
}

exports.default = RelationshipController;
