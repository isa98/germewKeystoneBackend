"use strict";

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _extends = require("@babel/runtime/helpers/extends"), _objectWithoutProperties = require("@babel/runtime/helpers/objectWithoutProperties"), react = require("react"), reactDom = require("react-dom"), ScrollLock = require("react-scrolllock"), core = require("@emotion/core"), styled = require("@emotion/styled"), theme = require("@arch-ui/theme"), FocusTrap = require("focus-trap-react"), modalUtils = require("@arch-ui/modal-utils");

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}

var _extends__default = _interopDefault(_extends), _objectWithoutProperties__default = _interopDefault(_objectWithoutProperties), ScrollLock__default = _interopDefault(ScrollLock), styled__default = _interopDefault(styled), FocusTrap__default = _interopDefault(FocusTrap);

const innerGutter = 15, Positioner = styled__default.default.div({
  display: "flex",
  justifyContent: "center",
  left: 0,
  position: "fixed",
  top: 0,
  width: "100%",
  zIndex: 2
}), Dialog = react.forwardRef((_ref, ref) => {
  let {component: Tag, width: width} = _ref, props = _objectWithoutProperties__default.default(_ref, [ "component", "width" ]);
  return core.jsx(Tag, _extends__default.default({
    ref: ref,
    role: "alertdialog",
    css: {
      backgroundColor: "white",
      borderBottomRightRadius: 2 * theme.borderRadius,
      borderBottomLeftRadius: 2 * theme.borderRadius,
      boxShadow: theme.shadows[2],
      display: "flex",
      flexDirection: "column",
      maxHeight: "100%",
      maxWidth: "96%",
      width: width
    }
  }, props));
}), Body = styled__default.default.div({
  lineHeight: 1.4,
  padding: 15
}), ModalConfirm = react.memo(({attachTo: attachTo = ("undefined" != typeof document ? document.body : null), children: children, component: component = "div", onKeyDown: onKeyDown, transitionState: transitionState, width: width = 400}) => (react.useEffect(() => {
  const handleKeyDown = e => {
    onKeyDown && onKeyDown(e);
  };
  return document.addEventListener("keydown", handleKeyDown, !1), () => {
    document.removeEventListener("keydown", handleKeyDown, !1);
  };
}, [ onkeydown ]), attachTo ? reactDom.createPortal(core.jsx(react.Fragment, null, core.jsx(modalUtils.Blanket, {
  style: modalUtils.fade(transitionState),
  isTinted: !0,
  isLight: !0
}), core.jsx(Positioner, {
  style: modalUtils.zoomInDown(transitionState)
}, core.jsx(FocusTrap__default.default, null, core.jsx(Dialog, {
  component: component,
  width: width
}, core.jsx(Body, null, children))), core.jsx(ScrollLock__default.default, null))), attachTo) : null));

var index = modalUtils.withTransitionState(ModalConfirm);

exports.default = index;
